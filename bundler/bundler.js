const loadEnv = require('./env-loader');
loadEnv();

const loadConfig = require('./config-loader');
const { resolveDependencies, resolvePath } = require('./resolvers');
const generateBundle = require('./bundle-generator');
const minify = require('./minifyer');
const HtmlProcessor = require('./html-processor');
const processEnvReplacer = require('./process-env-replacer');
const { shakeTree } = require('./tree-shaker');
const path = require('path');
const fs = require('fs');

const config = loadConfig();

const graph = resolveDependencies(config.entry, config.alias);

// –ü—Ä–∏–º–µ–Ω—è–µ–º tree shaking –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
let bundle;
if (config.treeShake !== false) {
    console.log('üå≥ –ü—Ä–∏–º–µ–Ω—è–µ–º tree shaking...');
    const shakenGraph = shakeTree(graph);
    bundle = generateBundle(shakenGraph);
} else {
    bundle = generateBundle(graph);
}

// –ó–∞–º–µ–Ω—è–µ–º process.env.* –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ .env/–æ–∫—Ä—É–∂–µ–Ω–∏—è
bundle = processEnvReplacer(bundle, config);

if (config.minify) {
  const minifyOptions = {
    removeComments: config.minifyOptions?.removeComments !== false,
    removeWhitespace: config.minifyOptions?.removeWhitespace !== false,
    minifyNames: config.minifyOptions?.minifyNames !== false
  };
  
  bundle = minify(bundle, minifyOptions);
}

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é dist –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
fs.mkdirSync(path.dirname(config.output), { recursive: true });
fs.writeFileSync(config.output, bundle);

console.log('‚úÖ –ë–∞–Ω–¥–ª —Å–æ–±—Ä–∞–Ω!');

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º HTML —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
if (config.html) {
  const htmlProcessor = new HtmlProcessor();
  const outputDir = path.dirname(config.output);
  
  if (fs.existsSync(config.html)) {
    const success = htmlProcessor.processHtmlFile(config.html, config.output, outputDir);
    if (success) {
      console.log('‚úÖ HTML —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML —Ñ–∞–π–ª–∞');
    }
  } else {
    console.log(`‚ö†Ô∏è HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${config.html}`);
  }
}