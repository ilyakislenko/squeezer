module.exports = function minify(code) {
    // Безопасная минификация - удаляем комментарии и лишние пробелы
    let result = code
      .replace(/\/\*[\s\S]*?\*\//g, '')           // Удаляем многострочные комментарии
      .replace(/^\s+/gm, '')                      // Удаляем пробелы в начале строк
      .replace(/\s+$/gm, '')                      // Удаляем пробелы в конце строк
      .replace(/\n\s*\n/g, '\n')                  // Удаляем пустые строки
      .replace(/\n+/g, '\n');                     // Сжимаем множественные переносы строк
    
    // Безопасное удаление однострочных комментариев
    const lines = result.split('\n');
    const processedLines = lines.map(line => {
        let inString = false;
        let stringChar = null;
        let result = '';
        
        for (let i = 0; i < line.length; i++) {
            const char = line[i];
            const nextChar = line[i + 1];
            
            if (!inString && char === '/' && nextChar === '/') {
                break;
            }
            
            if (!inString && (char === '"' || char === "'" || char === '`')) {
                inString = true;
                stringChar = char;
            } else if (inString && char === stringChar) {
                if (line[i - 1] !== '\\') {
                    inString = false;
                    stringChar = null;
                }
            }
            
            result += char;
        }
        
        return result;
    });
    
    result = processedLines.join('\n');
    
    // Удаляем переносы строк между операторами и выражениями
    result = result
      .replace(/\s*\n\s*([;{}])/g, '$1')          // Удаляем переносы перед ; { }
      .replace(/([;{}])\s*\n\s*/g, '$1')          // Удаляем переносы после ; { }
      .replace(/\s*\n\s*([,])/g, '$1')            // Удаляем переносы перед запятыми
      .replace(/([,])\s*\n\s*/g, '$1')            // Удаляем переносы после запятых
      .replace(/\s*\n\s*([=+\-*/%&|^<>!])/g, '$1') // Удаляем переносы перед операторами
      .replace(/([=+\-*/%&|^<>!])\s*\n\s*/g, '$1') // Удаляем переносы после операторов
      .replace(/\s*\n\s*([()])/g, '$1')           // Удаляем переносы перед скобками
      .replace(/([()])\s*\n\s*/g, '$1')           // Удаляем переносы после скобок
      .replace(/\s*\n\s*([\[\]])/g, '$1')         // Удаляем переносы перед квадратными скобками
      .replace(/([\[\]])\s*\n\s*/g, '$1')         // Удаляем переносы после квадратных скобок
      .replace(/\s*\n\s*([.])/g, '$1')            // Удаляем переносы перед точками
      .replace(/([.])\s*\n\s*/g, '$1')            // Удаляем переносы после точек
      .replace(/\s*\n\s*([?:])/g, '$1')           // Удаляем переносы перед тернарными операторами
      .replace(/([?:])\s*\n\s*/g, '$1')           // Удаляем переносы после тернарных операторов
      .replace(/\s*\n\s*([&])/g, '$1')            // Удаляем переносы перед логическими операторами
      .replace(/([&])\s*\n\s*/g, '$1')            // Удаляем переносы после логических операторов
      .replace(/\s*\n\s*([|])/g, '$1')            // Удаляем переносы перед побитовыми операторами
      .replace(/([|])\s*\n\s*/g, '$1')            // Удаляем переносы после побитовых операторов
      .replace(/\s*\n\s*([^a-zA-Z0-9_$])/g, '$1') // Удаляем переносы перед любыми символами кроме букв/цифр
      .replace(/([^a-zA-Z0-9_$])\s*\n\s*/g, '$1') // Удаляем переносы после любых символов кроме букв/цифр
      .replace(/\s*\n\s*/g, ' ')                  // Заменяем оставшиеся переносы на пробелы
      .replace(/\s+/g, ' ')                       // Сжимаем множественные пробелы
      .trim();                                    // Удаляем пробелы в начале и конце
    
    return result;
}